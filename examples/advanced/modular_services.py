"""
Example demonstrating modular messaging - same service code works with NATS or AWS
"""
import asyncio
import os
import time
from datetime import datetime
from typing import Dict, List

from modular_service import ConfigurableNATSService, ModularHTTPService, ModularServiceConfig, rpc, event_handler
from messaging.abstract_messaging import MessagingConfig


class UserService(ModularHTTPService):
    """User service that works with any messaging backend"""
    
    def __init__(self, config: ModularServiceConfig):
        super().__init__(config, port=8001)
        self.users: Dict[str, Dict] = {}
        self.user_counter = 0
        
        # Add HTTP endpoints
        @self.post(\"/api/users\")\n        async def create_user_http(user_data: dict):\n            return await self.create_user(\n                username=user_data[\"username\"],\n                email=user_data[\"email\"],\n                full_name=user_data.get(\"full_name\", \"\")\n            )\n        \n        @self.get(\"/api/users/{user_id}\")\n        async def get_user_http(user_id: str):\n            return await self.get_user(user_id=user_id)\n    \n    @rpc\n    async def create_user(self, username: str, email: str, full_name: str = \"\") -> Dict:\n        \"\"\"Create a new user\"\"\"\n        self.user_counter += 1\n        user_id = f\"user_{self.user_counter}\"\n        \n        user = {\n            \"user_id\": user_id,\n            \"username\": username,\n            \"email\": email,\n            \"full_name\": full_name,\n            \"created_at\": datetime.utcnow().isoformat()\n        }\n        \n        self.users[user_id] = user\n        \n        # Publish user created event\n        await self.publish_event(\n            \"users.created\",\n            user_id=user_id,\n            username=username,\n            email=email\n        )\n        \n        self.logger.info(f\"Created user: {username} ({user_id})\")\n        return user\n    \n    @rpc\n    async def get_user(self, user_id: str) -> Dict:\n        \"\"\"Get user by ID\"\"\"\n        user = self.users.get(user_id)\n        if not user:\n            raise ValueError(f\"User {user_id} not found\")\n        \n        return user\n    \n    @rpc\n    async def list_users(self) -> List[Dict]:\n        \"\"\"List all users\"\"\"\n        return list(self.users.values())\n\n\nclass NotificationService(ConfigurableNATSService):\n    \"\"\"Notification service that reacts to events\"\"\"\n    \n    def __init__(self, config: ModularServiceConfig):\n        super().__init__(config)\n        self.notifications: List[Dict] = []\n    \n    @event_handler(\"users.created\")\n    async def on_user_created(self, subject: str, user_id: str, username: str, email: str, **kwargs):\n        \"\"\"Handle user creation events\"\"\"\n        notification = {\n            \"type\": \"welcome_email\",\n            \"user_id\": user_id,\n            \"username\": username,\n            \"email\": email,\n            \"message\": f\"Welcome {username}! Your account has been created.\",\n            \"sent_at\": datetime.utcnow().isoformat()\n        }\n        \n        self.notifications.append(notification)\n        self.logger.info(f\"üìß Welcome email sent to {username} ({email})\")\n        \n        # Simulate sending email...\n        await asyncio.sleep(0.1)\n    \n    @event_handler(\"orders.*\")\n    async def on_order_event(self, subject: str, **kwargs):\n        \"\"\"Handle order-related events\"\"\"\n        event_type = subject.split('.')[-1]\n        self.logger.info(f\"üì¶ Order event: {event_type} - {kwargs}\")\n    \n    @rpc\n    async def get_notifications(self, user_id: str = None) -> List[Dict]:\n        \"\"\"Get notifications\"\"\"\n        if user_id:\n            return [n for n in self.notifications if n.get(\"user_id\") == user_id]\n        return self.notifications\n\n\nclass OrderService(ConfigurableNATSService):\n    \"\"\"Order service for testing cross-service communication\"\"\"\n    \n    def __init__(self, config: ModularServiceConfig):\n        super().__init__(config)\n        self.orders: Dict[str, Dict] = {}\n        self.order_counter = 0\n    \n    @rpc\n    async def create_order(self, user_id: str, items: List[Dict], total: float) -> Dict:\n        \"\"\"Create a new order\"\"\"\n        # Verify user exists\n        try:\n            user = await self.call_rpc(\"user_service\", \"get_user\", user_id=user_id)\n        except Exception as e:\n            raise ValueError(f\"Invalid user: {e}\")\n        \n        self.order_counter += 1\n        order_id = f\"order_{self.order_counter}\"\n        \n        order = {\n            \"order_id\": order_id,\n            \"user_id\": user_id,\n            \"username\": user[\"username\"],\n            \"items\": items,\n            \"total\": total,\n            \"status\": \"pending\",\n            \"created_at\": datetime.utcnow().isoformat()\n        }\n        \n        self.orders[order_id] = order\n        \n        # Publish order created event\n        await self.publish_event(\n            \"orders.created\",\n            order_id=order_id,\n            user_id=user_id,\n            total=total\n        )\n        \n        self.logger.info(f\"Created order: {order_id} for user {user['username']}\")\n        return order\n    \n    @rpc\n    async def get_order(self, order_id: str) -> Dict:\n        \"\"\"Get order by ID\"\"\"\n        order = self.orders.get(order_id)\n        if not order:\n            raise ValueError(f\"Order {order_id} not found\")\n        \n        return order\n\n\n# Configuration factory for different backends\ndef create_config(backend: str, service_name: str) -> ModularServiceConfig:\n    \"\"\"Create service configuration for different backends\"\"\"\n    \n    if backend == \"nats\":\n        messaging_config = MessagingConfig.nats(\n            url=os.getenv(\"NATS_URL\", \"nats://localhost:4222\")\n        )\n    \n    elif backend == \"aws\":\n        messaging_config = MessagingConfig.aws_sns_sqs(\n            region=os.getenv(\"AWS_REGION\", \"us-east-1\"),\n            access_key_id=os.getenv(\"AWS_ACCESS_KEY_ID\"),\n            secret_access_key=os.getenv(\"AWS_SECRET_ACCESS_KEY\")\n        )\n    \n    elif backend == \"google\":\n        messaging_config = MessagingConfig.google_pubsub(\n            project_id=os.getenv(\"GOOGLE_PROJECT_ID\"),\n            credentials_path=os.getenv(\"GOOGLE_APPLICATION_CREDENTIALS\")\n        )\n    \n    elif backend == \"azure\":\n        messaging_config = MessagingConfig.azure_service_bus(\n            connection_string=os.getenv(\"AZURE_SERVICE_BUS_CONNECTION_STRING\")\n        )\n    \n    else:\n        raise ValueError(f\"Unknown backend: {backend}\")\n    \n    return ModularServiceConfig(\n        name=service_name,\n        messaging=messaging_config\n    )\n\n\nasync def test_services(backend: str):\n    \"\"\"Test services with specified backend\"\"\"\n    print(f\"\\n=== Testing with {backend.upper()} backend ===\")\n    \n    # Create test client\n    client_config = create_config(backend, \"test_client\")\n    client = ConfigurableNATSService(client_config)\n    \n    await client.start()\n    \n    # Wait for services to be ready\n    await asyncio.sleep(2)\n    \n    try:\n        print(\"\\n1. Creating user...\")\n        user = await client.call_rpc(\n            \"user_service\",\n            \"create_user\",\n            username=\"johndoe\",\n            email=\"john@example.com\",\n            full_name=\"John Doe\"\n        )\n        print(f\"   Created: {user['username']} ({user['user_id']})\")\n        \n        print(\"\\n2. Creating order...\")\n        order = await client.call_rpc(\n            \"order_service\",\n            \"create_order\",\n            user_id=user[\"user_id\"],\n            items=[{\"name\": \"Widget\", \"quantity\": 2, \"price\": 10.0}],\n            total=20.0\n        )\n        print(f\"   Created: {order['order_id']} for ${order['total']}\")\n        \n        # Wait for async events to be processed\n        await asyncio.sleep(1)\n        \n        print(\"\\n3. Checking notifications...\")\n        notifications = await client.call_rpc(\n            \"notification_service\",\n            \"get_notifications\",\n            user_id=user[\"user_id\"]\n        )\n        print(f\"   Found {len(notifications)} notifications\")\n        for notif in notifications:\n            print(f\"   - {notif['type']}: {notif['message']}\")\n        \n        print(\"\\n4. Getting service stats...\")\n        user_stats = await client.call_rpc(\"user_service\", \"list_users\")\n        print(f\"   Total users: {len(user_stats)}\")\n        \n        print(f\"\\n‚úÖ {backend.upper()} backend test completed successfully!\")\n        \n    except Exception as e:\n        print(f\"‚ùå Test failed: {e}\")\n        import traceback\n        traceback.print_exc()\n    \n    finally:\n        await client.stop()\n\n\nasync def run_services(backend: str):\n    \"\"\"Run all services with specified backend\"\"\"\n    print(f\"Starting services with {backend.upper()} backend...\")\n    \n    # Create services\n    services = [\n        UserNATSService(create_config(backend, \"user_service\")),\n        NotificationNATSService(create_config(backend, \"notification_service\")),\n        OrderNATSService(create_config(backend, \"order_service\"))\n    ]\n    \n    try:\n        # Start all services\n        for service in services:\n            await service.start()\n        \n        print(f\"\\nüöÄ All services started with {backend.upper()} backend!\")\n        print(\"\\nNATSService endpoints:\")\n        print(\"- User NATSService API: http://localhost:8001/docs\")\n        print(\"- Health Check: http://localhost:8001/health\")\n        print(\"\\nPress Ctrl+C to stop...\")\n        \n        # Keep services running\n        while True:\n            await asyncio.sleep(1)\n            \n    except KeyboardInterrupt:\n        print(\"\\nShutting down services...\")\n    finally:\n        # Stop all services\n        for service in services:\n            await service.stop()\n\n\nasync def benchmark_backends():\n    \"\"\"Benchmark different messaging backends\"\"\"\n    backends = [\"nats\"]\n    \n    # Add AWS if credentials are available\n    if os.getenv(\"AWS_ACCESS_KEY_ID\"):\n        backends.append(\"aws\")\n    \n    results = {}\n    \n    for backend in backends:\n        print(f\"\\n=== Benchmarking {backend.upper()} ===\")\n        \n        # Start services\n        user_service = UserService(create_config(backend, \"user_service\"))\n        client = ConfigurableNATSService(create_config(backend, \"test_client\"))\n        \n        await user_service.start()\n        await client.start()\n        await asyncio.sleep(1)\n        \n        try:\n            # Benchmark RPC calls\n            start_time = time.time()\n            num_calls = 100\n            \n            for i in range(num_calls):\n                await client.call_rpc(\n                    \"user_service\",\n                    \"create_user\",\n                    username=f\"user{i}\",\n                    email=f\"user{i}@example.com\"\n                )\n            \n            elapsed = time.time() - start_time\n            rps = num_calls / elapsed\n            \n            results[backend] = {\n                \"total_time\": elapsed,\n                \"requests_per_second\": rps,\n                \"avg_latency_ms\": (elapsed / num_calls) * 1000\n            }\n            \n            print(f\"   {num_calls} RPC calls in {elapsed:.2f}s\")\n            print(f\"   {rps:.1f} requests/second\")\n            print(f\"   {(elapsed / num_calls) * 1000:.1f}ms average latency\")\n            \n        except Exception as e:\n            print(f\"   Benchmark failed: {e}\")\n            results[backend] = {\"error\": str(e)}\n        \n        finally:\n            await client.stop()\n            await user_service.stop()\n    \n    print(\"\\n=== Benchmark Results ===\")\n    for backend, result in results.items():\n        if \"error\" in result:\n            print(f\"{backend.upper()}: Failed - {result['error']}\")\n        else:\n            print(f\"{backend.upper()}: {result['requests_per_second']:.1f} RPS, {result['avg_latency_ms']:.1f}ms latency\")\n\n\nif __name__ == \"__main__\":\n    import sys\n    \n    # Default to NATS if no backend specified\n    backend = sys.argv[1] if len(sys.argv) > 1 else \"nats\"\n    command = sys.argv[2] if len(sys.argv) > 2 else \"run\"\n    \n    if command == \"test\":\n        asyncio.run(test_services(backend))\n    elif command == \"benchmark\":\n        asyncio.run(benchmark_backends())\n    else:\n        asyncio.run(run_services(backend))