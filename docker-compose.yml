version: '3.8'

services:
  # ================================
  # Core Infrastructure
  # ================================
  
  # PostgreSQL for application data and Zabbix
  postgres:
    image: postgres:15
    container_name: cliffracer_postgres
    environment:
      POSTGRES_DB: cliffracer
      POSTGRES_USER: cliffracer_user
      POSTGRES_PASSWORD: cliffracer_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cliffracer_user -d cliffracer"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - cliffracer-network

  # NATS messaging server
  nats:
    image: nats:2.10-alpine
    container_name: nats_server
    ports:
      - "4222:4222"   # Client connections
      - "8222:8222"   # HTTP monitoring
    command: [
      "-js",          # Enable JetStream
      "-sd", "/data", # Storage directory
      "-m", "8222"    # Enable monitoring
    ]
    volumes:
      - nats_data:/data
    restart: unless-stopped
    networks:
      - cliffracer-network

  # ================================
  # Monitoring Stack
  # ================================
  
  # Zabbix Database
  zabbix-postgres:
    image: postgres:15
    container_name: zabbix_postgres
    environment:
      POSTGRES_DB: zabbix
      POSTGRES_USER: zabbix
      POSTGRES_PASSWORD: zabbix_password
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - zabbix_postgres_data:/var/lib/postgresql/data
    networks:
      - cliffracer-network
    profiles:
      - monitoring
      - full

  # Zabbix Server
  zabbix-server:
    image: zabbix/zabbix-server-pgsql:alpine-7.0-latest
    container_name: zabbix_server
    environment:
      DB_SERVER_HOST: zabbix-postgres
      POSTGRES_DB: zabbix
      POSTGRES_USER: zabbix
      POSTGRES_PASSWORD: zabbix_password
      ZBX_ENABLE_SNMP_TRAPS: "true"
    ports:
      - "10051:10051"
    volumes:
      - zabbix_server_data:/var/lib/zabbix
      - ./monitoring/zabbix/templates:/usr/share/zabbix/templates
    depends_on:
      - zabbix-postgres
    networks:
      - cliffracer-network
    profiles:
      - monitoring
      - full

  # Zabbix Web Interface
  zabbix-web:
    image: zabbix/zabbix-web-nginx-pgsql:alpine-7.0-latest
    container_name: zabbix_web
    environment:
      DB_SERVER_HOST: zabbix-postgres
      POSTGRES_DB: zabbix
      POSTGRES_USER: zabbix
      POSTGRES_PASSWORD: zabbix_password
      ZBX_SERVER_HOST: zabbix-server
      PHP_TZ: "America/New_York"
    ports:
      - "8080:8080"
    depends_on:
      - zabbix-server
      - zabbix-postgres
    networks:
      - cliffracer-network
    profiles:
      - monitoring
      - full

  # Zabbix Agent for monitoring services
  zabbix-agent:
    image: zabbix/zabbix-agent2:alpine-7.0-latest
    container_name: zabbix_agent
    environment:
      ZBX_HOSTNAME: "NATS-Services-Host"
      ZBX_SERVER_HOST: zabbix-server
      ZBX_SERVER_PORT: 10051
      ZBX_ACTIVE_ALLOW: "true"
    volumes:
      - ./monitoring/zabbix/agent:/etc/zabbix/zabbix_agentd.d
      - /var/run/docker.sock:/var/run/docker.sock:ro
    ports:
      - "10050:10050"
    depends_on:
      - zabbix-server
    networks:
      - cliffracer-network
    privileged: true
    profiles:
      - monitoring
      - full

  # Metrics exporter service
  metrics-exporter:
    build:
      context: .
      dockerfile: Dockerfile.monitoring
    container_name: metrics_exporter
    environment:
      - SERVICE_NAME=metrics_exporter
      - NATS_URL=nats://nats:4222
      - ZABBIX_SERVER=zabbix-server
      - LOG_LEVEL=INFO
      - LOG_FORMAT=json
    depends_on:
      - nats
      - zabbix-server
    restart: always
    volumes:
      - ./monitoring/metrics:/app/metrics
      - ./logs:/app/logs
    networks:
      - cliffracer-network
    profiles:
      - monitoring
      - full
    command: python monitoring/metrics_service.py

  # ================================
  # NATS Microservices Framework
  # ================================
  
  # User Service (HTTP + NATS)
  user_service:
    build:
      context: .
      dockerfile: Dockerfile.monitoring
    container_name: user_service
    environment:
      - SERVICE_NAME=user_service
      - NATS_URL=nats://nats:4222
      - ZABBIX_SERVER=zabbix-server
      - LOG_LEVEL=INFO
      - LOG_FORMAT=json
      - DATABASE_URL=postgresql://cliffracer_user:cliffracer_password@postgres:5432/cliffracer
    depends_on:
      - nats
      - postgres
    ports:
      - "8001:8001"
    restart: always
    volumes:
      - ./logs:/app/logs
    networks:
      - cliffracer-network
    profiles:
      - microservices
      - full
    command: python -c "
      from nats_runner import ServiceRunner, configure_logging;
      from example_extended_services import UserService;
      from nats_service_extended import ServiceConfig;
      configure_logging();
      config = ServiceConfig(name='user_service');
      runner = ServiceRunner(UserService, config);
      runner.run_forever()
      "

  # Notification Service (WebSocket + NATS)
  notification_service:
    build:
      context: .
      dockerfile: Dockerfile.monitoring
    container_name: notification_service
    environment:
      - SERVICE_NAME=notification_service
      - NATS_URL=nats://nats:4222
      - ZABBIX_SERVER=zabbix-server
      - LOG_LEVEL=INFO
      - LOG_FORMAT=json
    depends_on:
      - nats
    ports:
      - "8002:8002"
    restart: always
    volumes:
      - ./logs:/app/logs
    networks:
      - cliffracer-network
    profiles:
      - microservices
      - full
    command: python -c "
      from nats_runner import ServiceRunner, configure_logging;
      from example_extended_services import NotificationService;
      from nats_service_extended import ServiceConfig;
      configure_logging();
      config = ServiceConfig(name='notification_service');
      runner = ServiceRunner(NotificationService, config);
      runner.run_forever()
      "

  # Analytics Service (NATS only)
  analytics_service:
    build:
      context: .
      dockerfile: Dockerfile.monitoring
    container_name: analytics_service
    environment:
      - SERVICE_NAME=analytics_service
      - NATS_URL=nats://nats:4222
      - ZABBIX_SERVER=zabbix-server
      - LOG_LEVEL=INFO
      - LOG_FORMAT=json
    depends_on:
      - nats
    restart: always
    volumes:
      - ./logs:/app/logs
    networks:
      - cliffracer-network
    profiles:
      - microservices
      - full
    command: python -c "
      from nats_runner import ServiceRunner, configure_logging;
      from example_extended_services import AnalyticsService;
      from nats_service_extended import ServiceConfig;
      configure_logging();
      config = ServiceConfig(name='analytics_service');
      runner = ServiceRunner(AnalyticsService, config);
      runner.run_forever()
      "

  # ================================
  # Legacy/Original Services
  # ================================
  
  # Original order service (basic NATS)
  order_service:
    build:
      context: .
      dockerfile: Dockerfile.nats
    container_name: order_service
    environment:
      - SERVICE_NAME=order_service
      - NATS_URL=nats://nats:4222
    depends_on:
      - nats
    restart: always
    volumes:
      - ./logs:/app/logs
    networks:
      - cliffracer-network
    profiles:
      - legacy
      - basic
    command: python -m example_services order

  # Original inventory service (basic NATS)
  inventory_service:
    build:
      context: .
      dockerfile: Dockerfile.nats
    container_name: inventory_service
    environment:
      - SERVICE_NAME=inventory_service
      - NATS_URL=nats://nats:4222
    depends_on:
      - nats
    restart: always
    volumes:
      - ./logs:/app/logs
    networks:
      - cliffracer-network
    profiles:
      - legacy
      - basic
    command: python -m example_services inventory

  # Haiku formatter service (from your original project)
  cliffracer_formatter:
    build:
      context: .
      dockerfile: Dockerfile.monitoring
    container_name: cliffracer_formatter
    environment:
      - SERVICE_NAME=cliffracer_formatter
      - DATABASE_URL=postgresql://cliffracer_user:cliffracer_password@postgres:5432/cliffracer
      - REDDIT_CLIENT_ID=${REDDIT_CLIENT_ID:-}
      - REDDIT_CLIENT_SECRET=${REDDIT_CLIENT_SECRET:-}
      - REDDIT_USER_AGENT=${REDDIT_USER_AGENT:-HaikuFormatter/1.0}
      - LOG_LEVEL=INFO
    depends_on:
      - postgres
    volumes:
      - ./logs:/app/logs
      - .:/app/data
    networks:
      - cliffracer-network
    profiles:
      - cliffracer-app
      - full
    # This would need custom implementation to run as a service
    # For now it's available for manual execution
    command: tail -f /dev/null  # Keep container running

volumes:
  postgres_data:
  nats_data:
  zabbix_postgres_data:
  zabbix_server_data:

networks:
  cliffracer-network:
    driver: bridge

# ================================
# Usage Examples:
# ================================
# 
# Core infrastructure only:
#   docker-compose up postgres nats -d
#
# Basic microservices (no monitoring):
#   docker-compose --profile microservices up -d
#
# With monitoring:
#   docker-compose --profile monitoring --profile microservices up -d
#
# Everything (full stack):
#   docker-compose --profile full up -d
#
# Legacy services only:
#   docker-compose --profile legacy up -d
#
# Just cliffracer services:
#   docker-compose --profile cliffracer-app up -d
#
# Development (core + microservices):
#   docker-compose up postgres nats user_service notification_service analytics_service -d