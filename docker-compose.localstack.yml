version: '3.8'

services:
  # LocalStack - AWS service emulation with maximum parity
  localstack:
    image: localstack/localstack:2.3
    ports:
      - "4566:4566"      # LocalStack endpoint
      - "4571:4571"      # LocalStack web UI (Pro)
    environment:
      # Core LocalStack configuration
      - SERVICES=sns,sqs,lambda,events,cloudwatch,logs,iam,s3,dynamodb,apigateway,secretsmanager
      - DEBUG=1
      - PERSISTENCE=1
      - LAMBDA_EXECUTOR=docker-reuse
      - DOCKER_HOST=unix:///var/run/docker.sock
      
      # AWS parity settings
      - AWS_DEFAULT_REGION=us-east-1
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - AWS_SESSION_TOKEN=test
      
      # LocalStack Pro features (if available)
      - LOCALSTACK_API_KEY=${LOCALSTACK_API_KEY:-}
      - EXTRA_CORS_ALLOWED_HEADERS=Content-Disposition,Content-Type,x-amz-acl
      - EXTRA_CORS_EXPOSED_HEADERS=ETag
      
      # Service-specific configurations
      - LAMBDA_DOCKER_NETWORK=cultku-localstack
      - LAMBDA_RUNTIME_EXECUTOR=docker-reuse
      - LAMBDA_REMOVE_CONTAINERS=true
      - SQS_ENDPOINT_STRATEGY=standard
      - SNS_ENDPOINT_STRATEGY=standard
      
      # Monitoring and logging
      - CLOUDWATCH_LOGS_ENDPOINT_STRATEGY=standard
      - EVENTS_ENDPOINT_STRATEGY=standard
      
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "./tmp/localstack:/tmp/localstack"
      - "./localstack-data:/var/lib/localstack"
    networks:
      - cultku-localstack
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4566/_localstack/health"]
      interval: 30s
      timeout: 10s
      retries: 5
  
  # LocalStack initialization - set up AWS resources
  localstack-init:
    image: amazon/aws-cli:2.13.25
    depends_on:
      localstack:
        condition: service_healthy
    environment:
      - AWS_DEFAULT_REGION=us-east-1
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - AWS_ENDPOINT_URL=http://localstack:4566
    volumes:
      - ./scripts/localstack-init.sh:/init.sh
    command: ["/bin/bash", "/init.sh"]
    networks:
      - cultku-localstack
  
  # User Service with full AWS stack (Lambda + SNS/SQS + CloudWatch)
  user-service-aws-lambda:
    build: 
      context: .
      dockerfile: Dockerfile.lambda
    depends_on:
      localstack-init:
        condition: service_completed_successfully
    environment:
      # AWS configuration
      - AWS_DEFAULT_REGION=us-east-1
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - AWS_ENDPOINT_URL=http://localstack:4566
      
      # Service configuration
      - MESSAGING_BACKEND=aws
      - RUNNER_TYPE=lambda
      - MONITORING_BACKEND=cloudwatch
      - SERVICE_NAME=user_service
      
      # Lambda configuration
      - LAMBDA_PREFIX=cultku-dev
      - LAMBDA_RUNTIME=python3.11
      - LAMBDA_TIMEOUT=300
      - LAMBDA_MEMORY=512
      
      # Monitoring configuration
      - CLOUDWATCH_NAMESPACE=Cultku/Development
      - CLOUDWATCH_LOG_GROUP=/aws/lambda/cultku-dev
      
    networks:
      - cultku-localstack
    command: python example_full_aws_stack.py
  
  # Traditional service for comparison (NATS + Docker + Zabbix)
  user-service-traditional:
    build: .
    depends_on:
      - nats
      - zabbix-server
    environment:
      - MESSAGING_BACKEND=nats
      - RUNNER_TYPE=process
      - MONITORING_BACKEND=zabbix
      - NATS_URL=nats://nats:4222
      - ZABBIX_SERVER=zabbix-server
      - SERVICE_NAME=user_service_traditional
    ports:
      - "8001:8001"
    networks:
      - cultku-localstack
    command: python example_modular_services.py nats run
    profiles: ["comparison"]
  
  # NATS for traditional comparison
  nats:
    image: nats:2.10-alpine
    ports:
      - "4222:4222"
      - "8222:8222"
    command: ["-js", "-m", "8222"]
    networks:
      - cultku-localstack
    profiles: ["comparison"]
  
  # Zabbix for traditional comparison
  zabbix-server:
    image: zabbix/zabbix-server-sqlite3:alpine-6.4-latest
    environment:
      - ZBX_HOSTNAME=zabbix-server
    ports:
      - "10051:10051"
    networks:
      - cultku-localstack
    profiles: ["comparison"]
  
  # LocalStack Web UI (if using Pro)
  localstack-ui:
    image: localstack/localstack-ui:latest
    ports:
      - "8055:3000"
    environment:
      - LOCALSTACK_URL=http://localstack:4566
    depends_on:
      - localstack
    networks:
      - cultku-localstack
    profiles: ["ui"]
  
  # Monitoring dashboard aggregator
  monitoring-dashboard:
    build:
      context: .
      dockerfile: Dockerfile.monitoring
    depends_on:
      - localstack
    environment:
      - AWS_ENDPOINT_URL=http://localstack:4566
      - AWS_DEFAULT_REGION=us-east-1
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - CLOUDWATCH_NAMESPACE=Cultku/Development
    ports:
      - "8090:8090"
    networks:
      - cultku-localstack
    command: python monitoring_dashboard.py
  
  # Load test client to generate metrics
  load-tester:
    build: .
    depends_on:
      - user-service-aws-lambda
    environment:
      - AWS_ENDPOINT_URL=http://localstack:4566
      - AWS_DEFAULT_REGION=us-east-1
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - MESSAGING_BACKEND=aws
      - TARGET_SERVICE=user_service
    networks:
      - cultku-localstack
    command: python load_test.py --duration 300 --rps 10
    profiles: ["load-test"]
  
  # Log aggregator for centralized logging
  log-aggregator:
    image: fluent/fluent-bit:2.2
    volumes:
      - ./config/fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf
      - ./logs:/logs
    depends_on:
      - localstack
    environment:
      - AWS_ENDPOINT_URL=http://localstack:4566
      - AWS_DEFAULT_REGION=us-east-1
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
    networks:
      - cultku-localstack
    profiles: ["logging"]

networks:
  cultku-localstack:
    driver: bridge
    name: cultku-localstack

volumes:
  localstack-data:
    driver: local

# Usage examples:
#
# Full AWS stack with LocalStack:
#   docker-compose -f docker-compose.localstack.yml up -d
#
# Include comparison with traditional stack:
#   docker-compose -f docker-compose.localstack.yml --profile comparison up -d
#
# Add LocalStack Pro UI:
#   docker-compose -f docker-compose.localstack.yml --profile ui up -d
#
# Run load tests:
#   docker-compose -f docker-compose.localstack.yml --profile load-test up load-tester
#
# Full monitoring with logging:
#   docker-compose -f docker-compose.localstack.yml --profile logging up -d